plot(earth)
st_crs(earth)
?st_crs
earth_crs <- st_crs(earth)
earth_crs
gr_wgs84 <- st_graticule()
plot(earth, graticule = gr_wgs84, col = 'grey', main = "World Geodetic System 1984", axes = T)
earth_ww <- earth %>% st_transform(crs = "ESRI:54018")
gr_ww <- st_graticule() %>% st_transform(crs = "ESRI:54018")
plot(earth_ww, graticule = gr_ww, col = 'grey', main ="Winkel World Projection")
install.packages("tmap")
library(tm_shape)
library(tmap)
tm_shape(earth_ww)
tm_shape(earth_ww) + tm_gratcule()
tm_shape(earth_ww) + tm_graticule()
tm_shape(earth_ww) + tm_graticules()
tm_shape(earth_ww) + tm_graticules() + tm_polygons()
tm_shape(earth_ww) +  tm_polygons() + tm_graticules()
glimpse(earth_ww)
library(tidyverse)
glimpse(earth_ww)
earth_ww
tm_shape(earth_ww) +  tm_polygons(col = "subregions") + tm_graticules()
View(gr_wgs84)
tm_shape(earth_ww) +  tm_polygons(col = "geometry") + tm_graticules()
names(earth_ww)
tm_shape(earth_ww) +  tm_polygons(col = "lightblue") + tm_graticules()
View(gr_ww)
str(earth_ww)
earth_ww
tm_shape(earth_ww) +  tm_polygons(col = "MAP_COLORS") + tm_graticules()
tm_shape(earth_ww) +  tm_polygons(col = "REGION") + tm_graticules()
tm_shape(earth_ww) +  tm_polygons(col = "region") + tm_graticules()
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules()
spplot(earth_ww)
plot(earth_ww)
plot(earth_ww[3:6])
plot(earth_ww["pop"])
earth <- ne_countries(scale = "medium", returnclass = "sf")
plot(earth)
earth <- ne_countries(returnclass = 'sf') %>%
st_geometry()
plot(earth)
earth_crs <- st_crs(earth)
plot(earth, graticule = gr_wgs84, col = 'grey', main = "World Geodetic System 1984", axes = T)
earth_ww <- earth %>% st_transform(crs = "ESRI:54018")
gr_ww <- st_graticule() %>% st_transform(crs = "ESRI:54018")
plot(earth_ww, graticule = gr_ww, col = 'grey', main ="Winkel World Projection")
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules(gr_ww)
tm_shape(earth_ww) +  tm_polygons(col = "lightblue") + tm_graticules(gr_ww)
tm_shape(earth_ww) +  tm_polygons(col = "lightblue") + tm_graticules()
earth_ori <- ne_countries(scale = "medium", returnclass = "sf")
View(earth_ori)
glimpse(earth_ori)
tm_shape(earth_ori) +  tm_polygons(col = "lightblue") + tm_graticules()
tm_shape(earth_ori) +  tm_polygons(col = earth$continent) + tm_graticules()
tm_shape(earth_ww) +  tm_polygons(col = earth$continent) + tm_graticules()
tm_shape(earth_crs) +  tm_polygons(col = "continent") + tm_graticules()
plot(earth_ww, graticule = gr_ww, col = 'grey', main ="Winkel World Projection")
tm_shape(earth_ww) +  tm_polygons(col = "lightblue") + tm_graticules()
earth <- ne_countries(scale = "medium", returnclass = "sf")
earth_ww <- earth %>% st_transform(crs = "ESRI:54018")
tm_shape(earth_ww) +  tm_polygons(col = "lightblue") + tm_graticules()
tm_shape(earth_ww) +  tm_polygons(col = "continet") + tm_graticules()
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules()
tm_shape(earth_crs) +  tm_polygons(col = "continent") + tm_graticules() + tm_scale_bar()
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules() + tm_scale_bar()
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules() + tm_scale_bar() + tm_compass()
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules() + tm_scale_bar() + (type = "8star", position = c("left", "top")
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules() + tm_scale_bar() + (type = "8star", position = c("left", "top"))
tm_shape(earth_ww) +  tm_polygons(col = "continent") + tm_graticules() + tm_scale_bar() + tm_compass(type = "8star", position = c("left", "top"))
tm_shape(earth_ww) +  tm_polygons(title = "World Map", col = "continent") + tm_graticules() + tm_scale_bar() + tm_compass(type = "arrow", position = c("left", "top"))
tm_shape(earth_ww) +  tm_polygons(title = "World Map", col = "continent") + tm_graticules() + tm_scale_bar() + tm_compass(type = "arrow", position = c("right", "top"))
gc()
earth_polygon <- ne_countries(scale = "medium", returnclass = "sf")
earth_ww <- earth_polygon %>% st_transform(crs = "ESRI:54018")
tm_shape(earth_ww) +  tm_polygons(title = "World Map", col = "continent") +
tm_graticules() + tm_scale_bar() + tm_compass(type = "arrow", position = c("right", "top"))
install.packages("combinat")
library(combinat)
combn(40,18)
ncol(combn(40,18))
source("~/.active-rstudio-document")
comb(40,18)
comb(40,18) * 0.5^18 * -0.5^22
comb(40,18) * 0.5^18 * 0.5^22
binom_prob <- function(n,x,p){
comb(n,x) * p^x * (1-p)^(n-x)
}
binom_prob(40,18,0.5)
binom_prob(25,1,0.2)
pbinom(25,1,0.2)
pbinom(1,25,0.2)
?pbinom
dbinom(1,25,0.2)
dbinom(49,100,0.3)
pbinom(10,50,0.2)
pbinom(41,50,0.2)
pbinom(41,50,0.2)
pbinom(9,50,0.2)
1-pbinom(9,50,0.2)
hyper_dist(x,n,a,N){
comb(a,x) * comb(N-a)/comb(N,n)
}
hyper_dist <- function(x,n,a,N){
comb(a,x) * comb(N-a)/comb(N,n)
}
hyper_dist(7,10,2000,1100)
hyper_dist <- function(x,n,a,N){
comb(a,x) * comb(N-a, n-x)/comb(N,n)
}
hyper_dist(7,10,2000,1100)
hyper_dist <- function(x,n,a,N){
p <- N-a
q <- n-x
comb(a,x) * comb(p, q)/comb(N,n)
}
hyper_dist(7,10,2000,1100)
comb(1100,7) * comb(900,3) / comb(2000,10)
comb(1100,7)
comb(110,7)
comb(12,3) * comb(24,2) * comb(8,1) / comb(44,6)
dpois(3,4.6)
plot_usmap(data = election, values = "r_points", color = "black", exclude = c("DC")) +
scale_fill_gradient2(low = "blue4",
high = "red4", breaks = c(-45, -30, -15, 0, 15, 30, 45)) +
theme(legend.position = "right") +
labs(title = "Winning Margins for Republican") + labs(fill = "Margin")
library(usmap)
plot_usmap(data = election, values = "r_points", color = "black", exclude = c("DC")) +
scale_fill_gradient2(low = "blue4",
high = "red4", breaks = c(-45, -30, -15, 0, 15, 30, 45)) +
theme(legend.position = "right") +
labs(title = "Winning Margins for Republican") + labs(fill = "Margin")
election
?usmap
?plot_usmap()
trace(plot_usmap, edit = T)
(3.1^0.5 + -1.7^0.5 + -1.7^0.5 + -1.4^0.5 + 1.7^0.5)/3
(3.1^2 + -1.7^2 + -1.7^2 + -1.4^2 + 1.7^2)/3
?sd
sd(-3, 12,  9, 17)
sd(c(-3, 12,  9, 17))
?t.test
comb <- function(n, x) {
factorial(n) / (factorial(n-x) * factorial(x))
}
comb(3,2)
comb(5,2)
comb(6,2)
2*pnorm(-abs(0.78))
# Covid Vaccine Ontario ---------------------------------------------------
library(tidyverse)
iris
summary(iris)
iris %>%
group_by(Species) %>%
summarise(mean = mean(Sepal.Length))
iris %>%
group_by(Species) %>%
summarise(mean = mean(Sepal.Length, na.rm = T))
?t.test
qt(0.975, 39)
pt(-2.251674145, 39)
library('installR')
install.packages("installr")
library(ins)
library(installr)
updateR()
d <- c("iqttt,0077",
"obvhd,0093",
"flohd,0075")
substr(data[,1],6,5)
substr(d[,1],6,5)
str(d)
substr(d[1],6,5)
substr(d[1,],6,5)
substr(d[1],2,5)
substr(d[1],3,5)
substr(d[1],3,10)
substr(d[1],7,10)
solution <- function(data) {
d <-substr(d[1],7,10)
return d
d
getwd()
install.packages(c("bit", "bookdown", "broom", "bslib", "callr", "cli", "data.table", "digest", "evaluate", "gert", "ggplot2", "ggpmisc", "ggpp", "highr", "htmltools", "installr", "isoband", "jsonlite", "knitr", "lubridate", "markdown", "Matrix", "modelr", "openssl", "plyr", "processx", "ps", "purrr", "rmarkdown", "sass", "stringr", "sys", "tinytex", "vctrs", "whisker", "xfun", "xts", "yaml"))
install.packages(c("boot", "cluster", "foreign", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "survival"), lib="C:/Program Files/R/R-4.2.1/library")
install.packages(c("bit", "bookdown", "broom", "bslib", "callr", "cli", "data.table", "digest", "evaluate", "gert", "ggplot2", "ggpmisc", "ggpp", "highr", "htmltools", "installr", "isoband", "jsonlite", "knitr", "lubridate", "markdown", "Matrix", "modelr", "openssl", "plyr", "processx", "ps", "purrr", "rmarkdown", "sass", "stringr", "sys", "tinytex", "vctrs", "whisker", "xfun", "xts", "yaml"))
install.packages(c("bit", "bookdown", "broom", "bslib", "callr", "cli", "data.table", "digest", "evaluate", "gert", "ggplot2", "ggpmisc", "ggpp", "highr", "htmltools", "installr", "isoband", "jsonlite", "knitr", "lubridate", "markdown", "Matrix", "modelr", "openssl", "plyr", "processx", "ps", "purrr", "rmarkdown", "sass", "stringr", "sys", "tinytex", "vctrs", "whisker", "xfun", "xts", "yaml"))
install.packages("cli")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github('mraess/numberFormattR')
devtools::install_github('mraess/numberFormattR')
library(testthat)
source("C:/Users/Vinay/Google Drive/School/URA 2023/surveillance_functions/household_sim.R")
source("C:/Users/Vinay/Google Drive/School/URA 2023/School_Abstenteeism_Based_Influenza_Surveillance_Simulation_Study/New/testthat.R")
# Simulate households with children
subpop_children <- function(n){
if(n != 0){
# user input
cat("please enter a number here")
num1 <- scan(n = 1, what = double())
cat("Please enter three numbers separated by space:")
num2 <- scan(n = 3, what = double())
cat("Please enter three more numbers separated by space:")
num3 <- scan(n = 3, what = double())
cat("please enter a number")
num4 <- scan(n = 1, what = double())
}
return(rep(num2 + num3, num1+num4))
}
subpop_children(1)
?scan
# Simulate households with children
subpop_children <- function(n){
if(n != 0){
con <- getOption("ask_opts.con", stdin())
# user input
cat("please enter a number here")
num1 <- scan(con, n = 1, what = double())
cat("Please enter three numbers separated by space:")
num2 <- scan(con, n = 3, what = double())
cat("Please enter three more numbers separated by space:")
num3 <- scan(con, n = 3, what = double())
cat("please enter a number")
num4 <- scan(con, n = 1, what = double())
}
return(rep(num2 + num3, num1+num4))
}
f <- file()
lines <- c(1,1,2,3,1,2,3,1)
ans <- paste(lines, collapse = "\n")
write(ans, f)
options("ask_opts.con" = f)
subpop_children(1)
output_prompts <- capture_output_lines({
result <- subpop_children(1)
})
subpop_children(1)
f <- file()
lines <- c(1,1,2,3,1,2,3,1)
ans <- paste(lines, collapse = "\n")
write(ans, f)
options("ask_opts.con" = f) # set connection option
subpop_children(1)
f <- file()
lines <- c(1,1,2,3,1,2,3,1)
ans <- paste(lines, collapse = "\n")
write(ans, f)
options("ask_opts.con" = f) # set connection option
output_prompts <- capture_output_lines({
result <- subpop_children(1)
})
output_prompts
source("C:/Users/Vinay/Google Drive/School/URA 2023/surveillance_functions/household_sim.R")
#simulate catchment area
catch_df <- catchment_sim(16, 4.313320, 3.026894, 20)
#simulate elementary schools for each area
elementary_df <- elementary_pop(catch_df, 5.27426341, 0.01427793)
# simulate household with children and assign them to elementary school
house_children <- subpop_children(elementary_df)
cbind(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum"), elementary_df$schoolPop)
cbind(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="average"), elementary_df$schoolPop)
cbind(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="mean"), elementary_df$schoolPop)
aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="mean") == elementary_df$schoolPop
aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum")
aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum")[,2] == elementary_df$schoolPop
mean(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum")[,2]) == mean(elementary_df$schoolPop)
mean(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum")[,2])
(elementary_df$schoolPop)
mean(elementary_df$schoolPop)
round(mean(elementary_df$schoolPop))
round(mean(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum")[,2]))
round(mean(aggregate(house_children$num_elem_child ~ house_children$schoolID, FUN="sum")[,2])) == round(mean(elementary_df$schoolPop))
source("C:/Users/Vinay/Google Drive/School/URA 2023/surveillance_functions/household_sim.R")
source("C:/Users/Vinay/Google Drive/School/URA 2023/surveillance_functions/household_sim.R")
catch_df <- catchment_sim(16, 4.313320, 3.026894, 20)
#simulate elementary schools for each area
elementary_df <- elementary_pop(catch_df, 5.27426341, 0.01427793)
# simulate household with children and assign them to elementary school
house_children <- subpop_children(elementary_df)
a <- list(unif_parent_type, unif_child_num, unif_childAge1, unif_childAge2, unif_childAge3)
a <- list(c(unif_parent_type, unif_child_num, unif_childAge1, unif_childAge2, unif_childAge3))
source("C:/Users/Vinay/Google Drive/School/URA 2023/surveillance_functions/household_sim.R")
#simulate catchment area
catch_df <- catchment_sim(16, 4.313320, 3.026894, 20)
#simulate elementary schools for each area
elementary_df <- elementary_pop(catch_df, 5.27426341, 0.01427793)
# simulate household with children and assign them to elementary school
house_children <- subpop_children(elementary_df)
# simulate household with children and assign them to elementary school
house_children <- subpop_children(elementary_df)
# simulate household with no children and assign them to elementary school
house_noChild <- subpop_noChildren(house_children, elementary_df)
summary(house_children)
summary(house_noChild)
aggregate(house_children$catchID)
aggregate(house_children$catchID, group_by)
aggregate(house_children$catchID, group)
aggregate(house_children$catchID, count)
aggregate(house_children$catchID, sum)
aggregate(house_children$catchID, FUN = sum)
house_children |> dplyr::group_by(catchId)
house_children |> dplyr::group_by(catchID)
house_children |> dplyr::group_by(catchID) |> dplyr::summarise(catchID)
house_children |> dplyr::group_by(catchID) |> dplyr::count(catchID)
house_children |> dplyr::group_by(catchID) |> dplyr::count(catchID)[,1]
(house_children |> dplyr::group_by(catchID) |> dplyr::count(catchID))[,1]
table(house_children$schoolID)
table(house_children$schoolID)[,1]
(table(house_children$schoolID))[,1]
(table(house_children$schoolID))[1,]
(table(house_children$schoolID))[1]
str(table(house_children$schoolID))
table(house_noChild$schoolID)
table(house_children$catchID)
table(house_noChild$catchID)
table(house_noChild$catchID) ==  table(house_noChild$catchID)
table(house_noChild$catchID) ==  table(house_children$catchID)
table(house_noChild$catchID) ==  (table(house_children$catchID))[,1]
table(house_noChild$catchID)[1,]
table(house_noChild$catchID)[1:]
table(house_noChild$catchID)[1]
table(house_noChild$catchID)[1:16]
str(table(house_noChild$catchID))
summary(table(house_noChild$catchID))
table(house_noChild$catchID) == data.frame(house_children$catchID)
table(house_noChild$catchID) == table(house_children$catchID)
as.vector(tapply(house_children$catchID, house_noChild$catchID, length))
counts <- as.vector(tapply(house_children$catchID, house_children$catchID, length))
as.vector(tapply(house_children$catchID, house_children$catchID, length))
tapply(house_children$catchID, house_children$catchID, length)
tapply(house_children$catchID, house_children$catchID, length)[1]
length(table(house_noChild$catchID))
setwd("C:/Users/Vinay/Google Drive/School/2023/MS Club/Part 2")
here()
library(here)
here()
?here()
here("data", "jeopardy.csv")
library(dplyr)
library(readr)
View(jeopardy)
# import our jeopardy data into an object called 'jeopardy'
jeopardy <- read_csv("data/jeopardy.csv")
View(jeopardy)
glimpse(jeopardy)
str(jeopardy)
glimpse(jeopardy)
# print first five rows
head(jeopardy)
# print last five rows
tail(jeopardy)
# import our jeopardy data into an object called 'jeopardy'
jeopardy <- read_csv("data/jeopardy.csv")
# take a quick look at our data
glimpse(jeopardy)
# print first five rows
head(jeopardy)
names(jeopardy)
column_names <- c("show_number", "air_date", "round", "category", "value", "question", "answer")
names(jeopardy) <- column_names
names(jeopardy)
# lets look at the value column
jeopardy$value
unique(jeopardy$value)
jeopardy %>%
filter(value != "None") %>%
unique()
jeopardy %>%
filter(value != "None") %>%
unique(value)
unique(jeopardy %>%
filter(value != "None")$value)
filter(value != "None")$value
filter(value != "None"))$value
unique((jeopardy %>%
filter(value != "None"))$value)
# package to manipulate strings
library(stringr)
?str_replace_all
# filter out "None" from value column
jeopardy %>%
filter(value != "None") %>%
str_replace_all(value, "$", "") %>%
head()
head(jeopardy)
# filter out "None" from value column
jeopardy %>%
filter(value != "None") %>%
str_replace_all("$", "")%>%
head()
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(fruits, "[aeiou]", "-")
jeopardy$value <- (jeopardy$value, c("$" = "", ,""))
jeopardy$value <- str_replace_all(jeopardy$value, c("$" = "", ,"," = ""))
jeopardy$value <- str_replace_all(jeopardy$value, c("$" = "", "," = ""))
unique(jeopardy$value)
# filter out "None" from value column
jeopardy <- jeopardy %>%
filter(value != "None")
unique(jeopardy$value)
jeopardy$value <- str_replace_all(jeopardy$value, c("\\$" = "", "," = ""))
unique(jeopardy$value)
jeopardy$value  <- as.numeric(jeopardy$value)
glimpse(jeopardy)
?separate
library(tidyr)
?separte
?separate
head(separate_wider_delim(jeopardy$value, delim = "-"))
head(separate_wider_delim(jeopardy, value, delim = "-"))
head(separate_wider_delim(jeopardy, air_date, delim = "-"))
glimpse(jeopardy)
head(separate_wider_delim(jeopardy, air_date, delim = "-", names = "year", "month", "day"))
head(separate_wider_delim(jeopardy, air_date, delim = "-", names = c("year", "month", "day")))
jeopardy <- jeopardy %>%
separate_wider_delim(air_date, delim = "-",
names = c("year", "month", "day")) %>%
mutate_at(vars(year, month, day), as.numeric)
glimpse(jeopardy)
unique(jeopardy$category)
length(unique(jeopardy$category))
sum(jeopardy$category == "science")
sum(jeopardy$category == "Science")
jeopardy$category == "science"
sum(jeopardy$category == "SCIENCE")
sum(jeopardy$category == "SCIENCE CLASS")
sum(jeopardy$category == "SCIENCE CLASS" || jeopardy$category == "SCIENCE")
sum((jeopardy$category == "SCIENCE CLASS" || jeopardy$category == "SCIENCE"))
jeopardy$category == "SCIENCE CLASS" || jeopardy$category == "SCIENCE"
sum(jeopardy$category == "SCIENCE*")
sum(grepl("science", jeopardy$column, ignore.case = TRUE))
sum(grepl("science", jeopardy$category, ignore.case = TRUE))
sum(grepl("science*", jeopardy$category, ignore.case = TRUE))
sum(grepl("\\science", jeopardy$category, ignore.case = TRUE))
chisq.test(observed)
n_science <- sum(grepl("science", jeopardy$category, ignore.case = TRUE))
n_not_science <- n_questions - n_science
n_questions <- nrow(jeopardy)
prob_category_exp <- 1/3369
prob_not_category_exp <- 3368/3369
prob_expected <- c(prob_category_exp, prob_not_category_exp)
n_not_science <- n_questions - n_science
observed <- matrix(c(n_science, n_not_science,0,0), ncol = 2)
chisq.test(observed)
observed <- matrix(c(n_science, n_not_science,prob_category_exp,prob_category_exp), ncol = 2)
chisq.test(observed)
prob_science <- n_science/n_questions
prob_not_science <- n_not_science/n_questions
observed <- matrix(c(prob_science, prob_not_science,
prob_category_exp,prob_category_exp), ncol = 2)
chisq.test(observed)
?pull
categories = pull(jeopardy, category)
for (c in categories) {
if ("science" %in% c) {
n_science_categories = n_science_categories + 1
}
}
n_science_categories = 0
for (c in categories) {
if ("science" %in% c) {
n_science_categories = n_science_categories + 1
}
}
n_science_categories =0
for (c in categories) {
if ("science" %in% c) {
n_science_categories = n_science_categories + 1
}
}
observed
observed <- matrix(c(n_science, n_not_science,
prob_category_exp,prob_category_exp), ncol = 2)
chisq.test(observed)
science <- c(n_science, n_not_science)
chisq.test(science, prob_expected)
n_shakespeare_categories = 0
# Count how many times the word science appears in the categories
for (c in categories) {
if ("shakespeare" %in% c) {
n_shakespeare_categories = n_shakespeare_categories + 1
}
}
shakespeare_obs = c(n_shakespeare_categories, n_questions - n_shakespeare_categories)
p_expected = c(1/3369, 3368/3369)
chisq.test(shakespeare_obs, p = p_expected)
n_questions
length(unique(jeopardy$category))
nrow(unique(jeopardy$category))
n_questions <- nrow(jeopardy)
categories = pull(jeopardy, category)
n_science_categories = 0
# Count how many times the word science appears in the categories
for (c in categories) {
if ("science" %in% c) {
n_science_categories = n_science_categories + 1
}
}
science_obs = c(n_science_categories, n_questions - n_science_categories)
chisq.test(science_obs, p = prob_expected)
jeopardy %>%
arrange(year, month, date) %>%
head()
jeopardy %>%
arrange(year, month, day) %>%
head()
questions <- pull(jeopardy, question)
